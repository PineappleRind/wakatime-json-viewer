---
import KeyVal from "../components/KeyVal.astro";
import AllTimeGraph from "./AllTime/AllTimeGraph.astro";

const { embeddables } = Astro.props;
console.log(embeddables);
/**
 * Translates seconds into human readable format of seconds, minutes, hours, days, and years
 *
 * @param  {number} seconds The number of seconds to be processed
 * @return {string}         The phrase describing the amount of time
 */
function forHumans(seconds: number) {
  var levels = [
    [Math.floor(seconds / 31536000), "years"],
    [Math.floor((seconds % 31536000) / 86400), "days"],
    [Math.floor(((seconds % 31536000) % 86400) / 3600), "hours"],
    [Math.floor((((seconds % 31536000) % 86400) % 3600) / 60), "minutes"],
    [(((seconds % 31536000) % 86400) % 3600) % 60, "seconds"],
  ];
  var returntext = "";

  for (var i = 0, max = levels.length; i < max; i++) {
    if (levels[i][0] === 0) continue;
    returntext +=
      " " +
      levels[i][0] +
      " " +
      (levels[i][0] === 1
        ? levels[i][1].toString().substr(0, levels[i][1].toString().length - 1)
        : levels[i][1]);
  }
  return returntext.trim();
}

let totalTimeSpent = 0,
  OSes: { [x: string]: number } = {};
for (const day of embeddables.totals.days) {
  let cur = day.categories?.[0];
  if (!cur) continue;
  totalTimeSpent += cur.total;
}
---

<h1>All-Time Statistics</h1>
<p>since {new Date(embeddables.days?.[0].date).toLocaleDateString()}</p>
<br />
<KeyVal key="Time Spent Coding" value={forHumans(Math.round(totalTimeSpent))} />
<KeyVal
  key="Range"
  value={`${embeddables.totals.human_readable_range.replace(
    "since ",
    ""
  )} to ${new Date(embeddables.totals.days.at(-1).date)
    .toDateString()
    .slice(4)}`}
/>

<br />
<h2>All-Time Graph</h2>

<AllTimeGraph interval={90} json={embeddables} forHumans={forHumans} />
