---
const { embeddables } = Astro.props;
type Language = {
  name: string;
  percent: number;
  color: string;
};
let { data }: { data: Language[] } = embeddables.langs;
// coalesce data into Other
const otherThreshold = 0.3;
const breakpointIndex = data.findIndex((l) => l.percent < otherThreshold);
data.splice(breakpointIndex);
const totalPercent = data.reduce(
  (acc: number, cur: Language) => (acc += cur.percent),
  0
);

data.splice(
  data.findIndex((l) => l.name === "Other"),
  1
);

data.push({
  name: "Other",
  color: "#16ce40",
  percent: 100 - totalPercent,
});
data.sort((a, b) => (a.percent < b.percent ? 1 : -1));
const langs = data.map((l: Language) => l.name);
const colors = data.map((l: Language) => l.color);
const percents = data.map((l: Language) => l.percent);
---

<h1>Languages</h1>
<canvas width="500" class="languages-chart"></canvas>

<script
  type="module"
  set:html={`
  console.log(Chart, Chart.defaults)
    const langs = { 
        labels: ${JSON.stringify(langs)},
        datasets: [
            {
                borderWidth: 0, 
                data: ${JSON.stringify(percents)},
                backgroundColor: ${JSON.stringify(colors)},
                hoverOffset: 20,
            }
        ],
    }

    const chart = new Chart(document.querySelector(".languages-chart").getContext("2d"), {
        data: langs,
        type: "pie",
        options: {
          plugins: {
            tooltip: {
              enabled: true,
              intersect: false,
              mode: 'point',
              callbacks: {
                title: () => "",
                label: (item) => {
                  return item.label + ": " + item.parsed + '%';
                }
              },
              caretSize: 0,
            }
          }
        }
    })
`}
/>
